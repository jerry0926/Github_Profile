{"version":3,"sources":["img/other_1.png","img/other_2.png","mainAction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","post","url","data","timeout","axios","method","headers","then","response","catch","e","alert","App","state","this","callData","Data","length","setState","className","map","val","index","key","href","html_url","target","name","description","src","logo_1","style","marginTop","logo_2","fontSize","color","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mPCEpC,SAASC,EAAKC,EAAKC,GAAyB,IAAnBC,EAAkB,uDAAR,KACtC,OAAOC,IAAM,CACTC,OAAQ,MACRJ,IAAKA,EACLC,KAAMA,EACNC,QAASA,EACTG,QAAS,CACL,eAAgB,kCAChB,OAAU,uBAGbC,MAAK,SAAAC,GACF,OAAOA,EAASN,QAEnBO,OAAM,SAACC,GAAQC,MAAM,+B,sCCyDfC,E,kDAlEb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXX,KAAM,IAHI,E,gEAQZY,KAAKC,a,iKAIcf,EAAK,+CAAgD,I,QAAlEgB,E,QACGC,QACPH,KAAKI,SAAS,CACZhB,KAAMc,I,qIAMV,OACE,yBAAKG,UAAU,OACb,yBAAKA,UAAU,UACb,oDAEF,yBAAKA,UAAU,WAEXL,KAAKD,MAAMX,KAAKkB,KAAI,SAACC,EAAKC,GAAN,OAClB,yBAAKH,UAAU,QAAQI,IAAG,wBAAmBD,IAC3C,uBAAGE,KAAMH,EAAII,SAAUC,OAAO,UAAS,0BAAMP,UAAU,gBAAgBE,EAAIM,OAC3E,yBAAKR,UAAU,mBACZE,EAAIO,YACL,qCAAU,uBAAGJ,KAAMH,EAAII,SAAUC,OAAO,UAAUL,EAAII,iBAKhE,yBAAKN,UAAU,UACb,+CACA,yBAAKA,UAAU,SACb,6BACE,uDACA,uBAAGK,KAAK,4BAA4BE,OAAO,UAAS,yBAAKG,IAAKC,QAEhE,6BACE,iDACA,yBAAKC,MAAO,CAACC,UAAW,UAAxB,qCAEF,6BACE,mEACA,uBAAGR,KAAK,0BAA0BE,OAAO,UAAS,yBAAKG,IAAKI,SAGhE,uBAAGF,MAAO,CACRG,SAAU,OACVC,MAAO,UACPH,UAAW,OACXI,UAAW,WAJb,8I,GAvDQC,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEd3C,OAAM,SAAA4C,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.513a6db9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/other_1.c0e3eb3e.png\";","module.exports = __webpack_public_path__ + \"static/media/other_2.e5eadb52.png\";","import axios from 'axios'\r\n\r\nexport function post(url, data, timeout = 120000) {\r\n    return axios({\r\n        method: 'GET',\r\n        url: url,\r\n        data: data,     // post Data\r\n        timeout: timeout, // timeout\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=UTF-8',\r\n            'Accept': 'application/json;'\r\n        },\r\n    })\r\n        .then(response => {\r\n            return response.data\r\n        })\r\n        .catch((e) => { alert('連線錯誤') })\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport './css/App.scss';\nimport { post } from './mainAction'\nimport logo_1 from './img/other_1.png'\nimport logo_2 from './img/other_2.png'\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: []\n    }\n  }\n\n  componentDidMount() {\n    this.callData()\n  }\n\n  async callData() {\n    const Data = await post(`https://api.github.com/users/jerry0926/repos`, {})\n    if (Data.length) {\n      this.setState({\n        data: Data\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <span>My GitHub Profile</span>\n        </div>\n        <div className='profile'>\n          {\n            this.state.data.map((val, index) =>\n              <div className='block' key={`profile_block_${index}`}>\n                <a href={val.html_url} target='_blank'><span className='profile_name'>{val.name}</span></a>\n                <div className='profile_content'>\n                  {val.description}\n                  <p>Link : <a href={val.html_url} target='_blank'>{val.html_url}</a></p>\n                </div>\n              </div>)\n          }\n        </div>\n        <div className='header'>\n          <span>Other Project</span>\n          <div className='other'>\n            <div>\n              <p>隆意螺絲</p>\n              <a href='http://www.longiscrew.com' target='_blank'><img src={logo_1} /></a>\n            </div>\n            <div>\n              <p>媽媽桃</p>\n              <div style={{marginTop: '120px'}}>(網頁已關閉)</div>\n            </div>\n            <div>\n              <p>桃園律師公會</p>\n              <a href='http://www.tybar.org.tw' target='_blank'><img src={logo_2} /></a>\n            </div>\n          </div>\n          <p style={{\n            fontSize: '18px',\n            color: '#312c29',\n            marginTop: '40px',\n            textAlign: 'center'\n          }}>❇因目前從事博弈相關產業，恕無法提供相關作品</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}